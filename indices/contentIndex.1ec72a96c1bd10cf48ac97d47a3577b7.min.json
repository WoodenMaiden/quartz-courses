{"/":{"title":"‚öôÔ∏è DevOps Courses","content":"\n# Bienvenue sur mes cours de DevOps\n\n`Ins√©rer paragraphe sur qui je suis`","lastmodified":"2023-08-11T04:11:35.046401652Z","tags":[]},"/notes/Terraform":{"title":"Introduction √† Terraform","content":"## Outils/Comp√©tences\n\n![Terraform](https://img.shields.io/badge/terraform-%235835CC.svg?style=for-the-badge\u0026logo=terraform\u0026logoColor=white) ![Git](https://img.shields.io/badge/git-%23F05033.svg?style=for-the-badge\u0026logo=git\u0026logoColor=white) ![Heroku](https://img.shields.io/badge/heroku-%23430098.svg?style=for-the-badge\u0026logo=heroku\u0026logoColor=white)\n\n## Mots cl√©s\n\n#terraform #devops #cloud #architecture\n\n- - -\n# Pr√©sentation\n\nTerraform est un outil d'IAC (Infrastructure As Code), son but est de d√©clarer une architecture, de l'instancier et de la d√©truire.\n\n\u003e ‚ö†Ô∏è L'outil a pour but de configurer une ARCHITECTURE, pas une machine, pour √ßa il y a [Ansible](https://www.ansible.com/). n√©anmoins il est commun de coupler les deux, Ansible configurant les machines virtuelles cr√©√©es par Terraform. \n\nTerraform est tr√®s souvent utilis√© pour cr√©er des architectures sur un [cloud provider](https://www.techtarget.com/searchitchannel/definition/cloud-service-provider-cloud-provider) tel que AWS et Google Cloud, sur [Kubernetes](https://kubernetes.io/docs/concepts/overview/), sur [Heroku](https://www.heroku.com/) et bien d'autres. Dans ce TP nous l'utiliserons avec une instance locale de [Dokku](https://dokku.com/) une alternative gratuite de Heroku et [MongoDB Atlas](https://www.mongodb.com/atlas/database).\n\n## Pourquoi ?\n\nLes diff√©rents mod√®les de cloud computing (list√©s ci-dessous) proposent chacun une r√©partition des responsabilit√©s diff√©rentes entre le client et la plateforme, ce qui veut dire que c'est le r√¥le du client d‚Äôassurer certaines parties de son architecture.\n\n![[notes/images/cloud_service_models.png]]\n\nCr√©er une architecture sous forme de code avec Terraform garantit plusieurs choses: \n\n- **Automatisation des d√©ploiements ‚öôÔ∏è**: L'approvisionnement de l'infrastructure par les interfaces graphiques ou de scripts Bash est lent, source d'erreurs, et [scale](https://www.suse.com/suse-defines/definition/scalability/) tr√®s mal.\n\n- **Des r√©sultats pr√©visibles et reproductibles üî≠**: le code Terraform est relativement simple (pas de notions de classes, de fonctions etc.) et ne se r√©sume la plupart du temps qu'√† de la description de ressources.\n\n- **La possibilit√© de cr√©er mais aussi de d√©truire üí£**: Terraform utilise [[#Les providers]] qui peuvent chacun cr√©er mais aussi d√©truire les ressources qu'ils ont cr√©√©. \n\n- **Une architecture √©volutive üß¨**: Terraform est un langage, il existe donc les notions de variables que nous verrons plus tard dans le TP, cela permet de param√©trer l'architecture comme on le souhaite en changeant par exemple le mot de passe des bases de donn√©es, les r√©gions dans lesquelles seront d√©ploy√©es les ressources etc.\n\n- **La possibilit√© de versionner son architecture üì¶**: Il s'agit de loin de \u003cmark style=\"background: #FFF3A3A6;\"\u003el'argument le plus important de l'IAC\u003c/mark\u003e: vu qu'il s'agit de code on peut le versionner avec [git](https://git-scm.com/), [subversion](https://subversion.apache.org/) ou autres gestionnaires de version, ce qui permet une grande libert√© quant √† la gestion de notre architecture. \n  Faut il changer des network policies ? Faisons un commit l'ajoutant. S'av√®re t-il que cet ajout casse notre application ? Vite un `git revert` !\n\nPour commencer √† travailler avec Terraform, cr√©ez un nouveau r√©pertoire avec un fichier ayant l‚Äôextension `.tf` avec ce contenu: \n\n```hcl\nterraform {\n\n}\n```\n\nLancez `terraform init` et on peut commencer √† utiliser Terraform!\n## Comment fonctionne Terraform?\n\n### La CLI\n\n![[notes/images/tf_flow.png]]\nLa CLI de terraform propose des commandes pour interagir avec son architecture\n\n- `init` -\u003e Cr√©e les fichiers n√©cessaires pour terraform \n- `plan` -\u003e Terraform va ex√©cuter le code HCL des fichiers `.tf` mais ne va pas faire appel aux providers, cette commande permet d'avoir un aper√ßu des ressources qui seront g√©n√©r√©es.\n- `apply` -\u003e Terraform lance la phase de `plan` d√©crite pr√©c√©demment, apr√®s confirmation, les providers s'occupent de cr√©er les ressources g√©n√©r√©es.\n  Gr√¢ce au fichier de state que nous √©voquerons plus tard Terraform sera capable de cr√©er les ressources nouvellement d√©clar√©es, de mettre √† jour celles qui ont chang√©e et de supprimer celles qui ont √©t√© supprim√©es.\n  Il est possible de forcer la re-cr√©ation d'une ressource avec l'option `-remplace=\"\u003ctype_de_ressource\u003e.\u003cnom_de_la_ressource\u003e\"` \n- `destroy` -\u003e [\"I think we all know where this is going\"](https://media1.giphy.com/media/oe33xf3B50fsc/giphy.gif?cid=ecf05e47b61oing7kc29fwjmqsm1dmn6r7v0k3ubl54us292\u0026ep=v1_gifs_search\u0026rid=giphy.gif\u0026ct=g)\n\n### Les providers\n\nTerraform en lui m√™me n'a aucun id√©e de comment cr√©er une ressource tel qu'un bucket S3, un Ingres Kubernetes, une application sur Heroku/Dokku. Pour cr√©er ces dites ressources il va utiliser des Providers, il s'agit concr√®tement de plugin √©crits en go qui vont fournir les `ressources` que vous voulez cr√©er. Apr√®s que Terraform ex√©cute le code HCL (HashiCorp Language)  pour carlculer les attributs des ressources, il va laisser le provider faire les appels aux APIs n√©cessaires √† la cr√©ation de la ressource.\n\n![[notes/images/tf_providers.png]]\n\nCes providers sont recens√©s et document√©s en ligne sur https://registry.terraform.io, vous y trouverez pour chacun d'entre eux leur documentation.  \n\nPour ajouter un provider vous avez juste √† le d√©clarer dans le bloc `terraform`, et de le configurer avec le bloc `provider \"\u003cnom du provider\u003e\"`, les options de configurations sont trouvables dans le registre.\n\n```hcl\nterraform {\n\trequired_providers {\n\t\taws = {\n\t\t\tsource = \"hashicorp/aws\"\n\t\t\tversion = \"5.11.0\"\n\t\t}\n\t}\n}\n\nprovider \"aws\" {\n\t# options de configuration \n} \n\n# et maintenant on peut utiliser les ressources que le provider aws propose ‚òÅÔ∏è\n```\n\n### HCL\n\n#### Les ressources\n\nLes ressources repr√©sentent ce qu'un provider peut cr√©er, cela peut aller d'une machine virtuelle, d'une r√®gle r√©seau, d'une politique d'IAM etc.\n\nUne ressource se d√©finit ainsi en HCL.\n\n```hcl\nresource \"type_de_ressource\" \"identifiant_de_ma_ressource\" {\n\targument = valeur\n\t# autres arugments mentionn√©s dans la documentation du provider\n}\n```\n\nLes diff√©rents types de ressources sont disponibles gr√¢ce aux providers et chaque provider liste ses ressources dans sa documentation. L'identifiant lui sert √† diff√©rencier les ressources d'un m√™me type.\n\nEt c'est l√† o√π √ßa commence √† √™tre amusant, car ces arguments ont des types d'entr√©es, donc si on a des [types](https://developer.hashicorp.com/terraform/language/expressions/type-constraints) on a des op√©rations √† appliquer dessus üôÉ. Et c'est l√† que commence la partie \"programmation\" de terraform. Pourquoi ne pas attribuer le r√©sultat d'une fonction? \n\n```hcl\nresource \"local_file\" \"foo\" {\n  content  = lower(\"HELLO\") \n  #                 üëá oui on parlera des modules plus tard, vous n'avez rien vu \n  filename = \"${path.module}/foo.bar\"\n\n  # ah oui, et ${} permet la substitution des variables\n  # https://en.wikipedia.org/wiki/String_interpolation\n}\n```\n\nEt pourquoi pas faire r√©f√©rence √† la valeur d'une propri√©t√© appartenant √† une autre ressource ? C'est possible en l'invoquant sous la forme `\u003cTYPE DE RESSOURCE\u003e.\u003cNOM\u003e.\u003cATTRIBUT\u003e`: \n\n```hcl\nresource \"aws_vpn_connection\" \"example_connection\" {\n  # ...\n  transit_gateway_id  = \"donnez_moi_un_tag\"\n  # ...\n}\n\nresource \"aws_ec2_tag\" \"example_tag\" {\n  resource_id = aws_vpn_connection.example_connection.transit_gateway_attachment_id\n  key         = \"Name\"\n  value       = \"Hello World\"\n}\n```\n\n\u003e üí¨ Mais cela induit donc une d√©pendance entre les ressources n'est ce pas ?\n\n-- Oui, mais Terraform est assez malin pour le g√©rer seul! Il est rare que vous ayez √† d√©finir le m√©ta-argument `depends-on` üòâ\n\n##### \"Des m√©ta-arguments ?\"\n\nH√© oui, il existe des arguments communs √† tous les bloc ressources, peu importe leur provenance qui vont modifier le comportement des ressources, [la doc](https://developer.hashicorp.com/terraform/language/meta-arguments/depends_on) √©voque ces derniers mais ceux qui vont nous int√©resser sont `for_each` et `count`. \n\nConcr√®tement ces deux l√† ont un objectif commun: cr√©er plusieurs instance d'une ressource, mais ils le font diff√©remment. `count` lui cr√©√©e b√™tement des copies conformes de la ressource en question en leur ajoutant un compteur, `for_each` lui prend une collection de `string` une `map` ou un `objet` et peut attribuer les cl√©s et valeurs de ce dernier aux copies\n\n```hcl\nresource \"local_file\" \"foocount\" {\n  count    = 2 # Nombre de copies\n  content  = \"Je suis la copie n¬∞${count.index}\" \n  filename = \"${path.module}/copie${count.index}.txt\"\n  \n  # copie1.txt =\u003e \"Je suis la copie n¬∞1\" \n  # copie2.txt =\u003e \"Je suis la copie n¬∞2\" \n}\n\nresource \"local_file\" \"bareach\" {\n  for_each = toset([\"bar1\", \"bar2\"])\n  content  = \"je suis le fichier ${each.key}\"\n  filename = \"${path.module}/${each.key}.txt\"\n  \n  # bar1.txt =\u003e bar1\n  # bar2.txt =\u003e bar2\n}\n\nresource \"local_file\" \"totoeach\" {\n  for_each = {\n      tick = \"tock\"\n      ding = \"dong\"\n  }\n\n  content  = each.value\n  filename = \"${path.module}/${each.key}.txt\"\n\n  # tick.txt =\u003e tock\n  # ding.txt =\u003e dong\n}\n```\n\nOn utilise donc `count` pour cr√©er des copies conformes et `for_each` pour des copies avec des variantes.\n\n#### Les variables\n\nTout bon langage de programmation qui se respecte int√®gre un syst√®me de variables, c'est le cas de Terraform qui int√®gre le bloc variable \n\n```hcl\nvariable \"nom_de_ma_variable\" {\n  description = \"une string pour d√©crire la variable (optionnel)\"\n  type        = type # le type de votre variable \n  default     = \"Une valeur par d√©faut (optionnel)\"\n  sensitive   = false # n'affiche pas la variable sur la sortie standart\n  nullable    = false # est ce que la variable √† le droit d'√™tre nulle\n  \n  validation { # ce bloc stoppe l‚Äôex√©cution du code si la condition donn√©e n'est pas remplie.\n    condition     = # mettez ici une expression √©valu√©e √† true ou false\n    error_message = \"Un message d'erreur\"\n  }\n}\n```\n\nCes variables sont plus √† voir comme des inputs constant que l'utilisateur donnerait sur une ligne de commande dans le sens ou ces derni√®res ne peuvent √™tre r√©-assign√©es.\n\nPour renseigner ces variables on √† trois mani√®res de faire:\n\n- **La ligne de commande** :  avec l'option var `terraform apply -var=\"nom_de_ma_variable=ma_valeur\"`\n- **Les variables d'environnement**: En exportant une variable d'environnement pr√©fix√©e par  `TF_VAR_`, ex: `TF_VAR_myvar=\"value\"`\n- **Le fichier .tfvars**: cr√©ez un fichier finissant par l‚Äôextension .tfvars et pr√©cisez le avec l'option CLI `-var-file`, dans ce dernier affectez les valeurs (pas besoin si le fichier s'appelle terraform.tfvars), \n```hcl\nmosse = \"Moose\"\ngoose = 12\nbeef = {\n\tgrilled = true\n}\n```\n\n\u003e ‚ö†Ô∏è Pensez √† ne pas commit ce fichier, penser √† l'ignorer avec un `.gitignore` par exemple\n\nOn peut donc utiliser ces variables dans notre code HCL avec `var.nom_de_ma_variable`\n\n\u003e üìñ Avec la myriade d'expr√©ssions et d'op√©rations disponibles sur les types, il est plus pertinent d'aller les regarder par vous m√™me dans [la documentation √† se sujet](https://developer.hashicorp.com/terraform/language/expressions) \n#### Les sources de donn√©es\n\nParfois vous aurez besoin de donn√©es relatives √† une ressource qui n'est disponible √† sa cr√©ation, par exemple la date de cr√©ation d'une ressource, les providers proposent en plus des ressources des bloc `data` qui servent justement √† acc√©der √† ce genre de donn√©es.\n\n```hcl\ndata \"type\" \"nom\" {\n\tcontrainte_une  = true\n\tcontrainte_deux = \"value\"\n\t# autres contraintes\n}\n```\n\nDans ce type de bloc (tout aussi bien document√©) les arguments donn√©es sont des contraintes que la donn√©e doit respecter pour qu'elle soit retourn√©e tout comme le feraient la clause `WHERE` et `HAVING` en SQL. Et tout comme les ressources, elles sont identifi√©es par le couple type/nom et ont des propri√©t√© accessibles avec `\u003ctype_de_data\u003e.\u003cnom\u003e.\u003cattribut\u003e` \n### Les modules\n\n![[notes/images/tf_modules.svg]]\nUn projet Terraform est dot√© de modules, les modules sont des ensembles de fichiers Terraform qui prennent des variables en entr√©e et qui renvoie des variables de sorties, ils peuvent aussi bien provenir du registre terraform, de git ou encore de sous-r√©pertoires.\n\nOn d√©finit les variables d'entr√©es comme le chapitre [[#Les variables]] (sans les initialiser!), les valeurs de sortie elle sont d√©finies gr√¢ce au mot cl√© `output`:\n\n```hcl\noutput \"db_password\" {\n  value       = # Mettez ici la valeur retourn√©e\n  description = \"Mettez ici une description de l'output\"\n  sensitive   = true # d√©ffini si elle sera affich√©e dans la console\n\n  precondition {\n\t  condition = # mettez ici une expression √©valu√©e √† true ou false\n\t  error_message = \"un message d'erreur\"\n  }\n}\n```\n\nLe bloc `pr√©condition` stoppe l‚Äôex√©cution du code si la condition donn√©e n'est pas remplie.\n\nPour importer et utiliser un module on utilise le mot cl√© `module`:\n\n```hcl\nmodule \"mon_module\" {\n  source  = \"source\" # https://developer.hashicorp.com/terraform/language/modules/sources\n  version = \"X.X.X\"\n  \n  variable_une = \"valeur 1\"\n  variable_deux = true\n  variable_trois = type.nom.attribut\n  # le reste des variables d√©finies par le module\n}\n```\n\nComme vous avez du le deviner on peut acc√©der aux valeurs `output` avec `\u003cnom_du_module\u003e.\u003cnom_de_la_valeur_output\u003e`.\n### Le state\n\n\u003e ‚ÑπÔ∏è Bien que cette partie ne sera pas √©voqu√©e dans le TP, cette notion reste importante, surtout pour le travail en √©quipe \n#### Qu'est ce que c'est ? \n\nTerraform n'a pas de moyen de v√©rifier l'√©tat de l'architecture en temps r√©el avec les providers, quand lancez `terraform apply` un fichier `.tfstate` va √™tre √©crit et mis a jour.\n\n\u003cmark style=\"background: #FF5582A6;\"\u003eCe fichier contient l'ENTI√àRET√â de l'√©tat actuel de l'architecture y compris toutes les variables et autres donn√©es sensibles en clair, donc par piti√© ne le comittez pas.\u003c/mark\u003e\n\nH√© oui! si Terraform sait quelles ressources il doit modifier et les quelles il doit cr√©er/supprimer c'est en comparant la sortie du code HCL et ce qui il y a dans ce state.\n#### Probl√©matiques\n\n\u003e üí¨ Mais donc si je le supprime par pur accident, Terraform ne pourra plus savoir o√π il en est ! \n\u003e De plus si on est plusieurs dans mon √©quipe √† faire des `apply` comment on peut garantir la coh√©rence entre nos states\n\nOn peut r√©pondre √† ces deux probl√©matiques avec la d√©centralisation du state gr√¢ce au bloc `backend`.\n\n```hcl\nterraform {\n  backend \"\u003ctype\u003e\" {\n    #...\n  }\n}\n```\n\nUn `backend` d√©signe la mani√®re dont sera stock√© le fichier state, il est donc totalement possible de le mettre dans une base de donn√©es et d'utiliser les commandes de [push et de pull](https://developer.hashicorp.com/terraform/cli/state/recover) pour r√©cup√©rer et mettre √† jour le state, il existe une [dizaine de backends disponibles](https://developer.hashicorp.com/terraform/language/settings/backends/configuration) allant de la base de donn√©es PostgreSQL au bucket S3, c'est √† vous de voir.\n\n![[notes/images/tf_backend.png]]\n\n- - -\n# Le TP\n\n## Pr√©parer le TP\n\n1) Installez terraform: https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli\n2) Installez Dokku: https://dokku.com/docs/getting-started/installation/\n3) Assurez vous d'avoir python 3.10 ou plus r√©cent\n4) Clonez le r√©po du projet \n","lastmodified":"2023-08-11T04:11:35.046401652Z","tags":[]}}